
export const sceneBoundaryPrompt = `基于以下信息，分析场景的边界条件：

需求背景：
{{reqBackground}}

需求概述：
{{reqBrief}}

场景名称：{{sceneName}}

场景内容：
{{sceneContent}}

边界规则：
{{boundaryRules}}

请针对场景需求片段<场景内容>进行边界分析：
1. 参考<边界规则>使用准确的产品思维逻辑进行边界case识别（只分析该场景中的内容，总Case数控制在5～6个），要从产品经理的视角出发：
    * 注意重点检视和澄清功能及业务规则的边界场景，通过明确需求中的模糊术语（仅针对新功能）、完善规则条件及其组合、检查数值与范围的边界情况，以及验证时间与顺序依赖的各类边界场景，确保需求全面、无歧义且符合预期。
    * 仅输出直接影响用户核心体验的边界场景，按用户使用频率和业务影响程度排序；技术实现层面的边界问题先不深入分析讨论，**不用关注如**通用的交互操作case，如"用户连续点击多次XX"、"网络断开时点击XX"、"重复多次点击XX”、服务中断、资源不足、极端并发等情况下的Case
2. 为识别出来的每一条边界Case进行分析并补充处理建议，描述方式上先以陈述句描述场景条件，然后，从用户体验视角分析合理的规则处理逻辑和预期结果，并简洁表达；
    * **如果历史信息提供了明确且适用的处理方式，建议应与其保持一致。**
    * **如果历史信息不适用或无直接参考，则基于通用原则提出最合理的处理逻辑。**

输出时候，只需要输出针对需求片段结合边界Case的内容，最好呈现方式能便于产品经理跟原始需求片段一一对应印证，

<Output>
## **边界分析 (针对选中片段):**

### **关于 "原文关键短语1":** ———————————//尽可能简洁地概括或引用原文的关键点
- **⚠️ 边界Case **: XXXX（50字内Case简述）；XXX（40字内处理建议概要）；
- **⚠️ 边界Case **: XXXX（50字内Case简述）；XXX（40字内处理建议概要）；

### **关于 "原文关键短语2":**
  - **⚠️ 边界Case **: XXXX（50字内Case简述）；XXX（40字内处理建议概要）；

### **关于 "概括性描述" (如适用):**
- **⚠️ 边界Case **: XXXX（50字内Case简述）；XXX（40字内处理建议概要）；

</Output>

请开始分析：`; 