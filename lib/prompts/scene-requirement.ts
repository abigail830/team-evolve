export const sceneRequirementPrompt = `基于以下信息，优化场景需求描述：

需求背景：
{{reqBackground}}

需求概述：
{{reqBrief}}

场景名称：{{sceneName}}

场景内容：
{{sceneContent}}

边界分析结果：
{{boundaryAnalysis}}

<Rules>
1. 只关注当前场景的需求描述，不要重复需求背景和概述等上下文信息
2. 保持场景描述的独立性和完整性
3. 结合边界分析结果，补充和完善场景描述中的关键点
4. 使用清晰、准确、专业的语言
5. 注意保持描述的逻辑性和连贯性
6. 所有输出内容必须基于输入信息的实际分析结果，不要生成通用的、模板化的内容
7. 如果某些章节（如全局约束条件或补充说明）在分析中没有发现相关内容，可以省略该章节
</Rules>

<Instructions>
1. 首先明确识别当前场景的主要操作角色
2. 判断当前是配置场景还是使用场景：
   - 后台配置场景：如运营后台进行机器人等配置，关注配置值的合法性、配置操作的正确性
   - 前台使用场景：如通过API进行问答对接，关注最终用户的使用体验和业务规则
   - 数据分析场景：如基于看板进行数据分析，关注数据的准确性和时效性
3. 仔细分析边界分析结果，提取所有与当前场景角色相关的关键信息
4. 将边界分析中的约束条件、异常情况等信息，优先关联到具体的用户旅程步骤，并确保这些内容都是针对当前场景角色的实际操作
5. 在描述约束条件时：
   - 后台配置场景：描述配置值的允许范围、格式要求等
   - 前台使用场景：描述业务规则、使用限制等
   - 数据分析场景：描述数据口径、统计规则、数据权限等
6. 在描述异常处理时：
   - 后台配置场景：描述配置操作失败、配置值不合法等情况的处理
   - 前台使用场景：描述用户操作异常、业务规则冲突等情况的处理
   - 数据分析场景：描述数据异常、数据延迟、权限不足等情况的处理
7. 确保所有输出的内容都能在输入信息中找到对应的依据
</Instructions>

<Output_Format>
请按以下格式输出优化后的场景需求描述：

### 场景名称
[优化后的场景名称，明确标识场景的主要操作角色]

### 场景概述
[优化后的场景概述，明确说明该场景是面向哪个角色的，以及该角色在此场景中要完成的主要功能]

### 前置条件
[当前场景角色执行操作的前提条件]

### 用户旅程
[对于每个步骤：
1. [步骤描述，明确说明是当前角色的操作]
   - 业务规则和约束条件：[该步骤中当前角色相关的规则和约束，注意区分配置场景和使用场景]
   - 异常处理：[该步骤中当前角色在执行当前操作时可能遇到的异常及处理方式]
2. [步骤描述，明确说明是当前角色的操作]
   - 业务规则和约束条件：[该步骤中当前角色相关的规则和约束，注意区分配置场景和使用场景]
   - 异常处理：[该步骤中当前角色在执行当前操作时可能遇到的异常及处理方式]
...]

### 全局约束条件
[仅当边界分析结果中确实存在与当前场景角色相关的跨步骤或影响整个场景的约束条件时才包含此部分]
</Output_Format>

请开始优化：`; 