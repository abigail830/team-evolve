// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // 添加预览特性支持
  previewFeatures = ["postgresqlExtensions", "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // 用于直接连接（比如数据库迁移）
  extensions = [vector]
}

// 向量模型配置
model VectorModelConfig {
  id          String   @id @default(cuid())
  name        String
  model       String
  baseURL     String
  apiKey      String
  dimension   Int
  isDefault   Boolean  @default(false)
  provider    String?
  createdAt   DateTime @default(now())
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
}

// 平台类型枚举
enum PlatformType {
  TEAM_EVOLVE
  JIRA
}

// 用户模型
model User {
  id           String          @id @default(uuid())
  email        String          @unique
  name         String
  password     String          @db.VarChar(255)
  role         UserRole        @default(USER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  accessKeys   UserAccessKey[]

  @@index([email])
}

// 用户平台访问密钥模型
model UserAccessKey {
  id                String       @id @default(cuid())
  userId            String
  platform          PlatformType
  encryptedAccessKey String       @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // 关联到用户
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 确保每个用户在每个平台只有一个密钥
  @@unique([userId, platform])
  @@index([userId])
  @@index([platform])
}

// 术语表模型
model Glossary {
  id          Int       @id @default(autoincrement())
  term        String    @db.VarChar(255)
  aliases     String?   @db.VarChar(255)
  explanation String    @db.Text
  domain      String    @db.VarChar(255)
  status      String    @default("pending") @db.VarChar(20)
  // 向量字段需要使用Unsupported类型，因为Prisma不直接支持PostgreSQL的vector类型
  // 我们添加注释以便理解，但实际上需要使用原始SQL创建
  /// @PostgreSQL.Vector(1536)
  embedding   Unsupported("vector(1536)")?
  approvedAt  DateTime?
  approvedBy  String?   @db.VarChar(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  createdBy   String?   @db.VarChar(100)

  // 添加联合唯一约束，使每个领域内的术语唯一
  @@unique([term, domain])
  // 在Prisma中添加索引
  @@index([term])
  @@index([status])
  @@index([domain])
  // 向量索引需要使用原始SQL创建
}

// 添加更多模型，例如：
// model Task {
//   id          String   @id @default(uuid())
//   title       String
//   description String?
//   completed   Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   userId      String
//   user        User     @relation(fields: [userId], references: [id])
// }

model AIModelConfig {
  id          String   @id @default(cuid())
  name        String
  model       String
  baseURL     String
  apiKey      String
  temperature Float    @default(0.7)
  isDefault   Boolean  @default(false)
  provider    String?
  type        String   @default("language") // "language" 或 "vision"
  createdAt   DateTime @default(now())
}

model RequirementSummary {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  summary        String   @db.Text
  domain         String   @db.VarChar(100)
  relatedModules String[] @default([])
  embedding      Float[]  @default([]) // 向量化后的embedding
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  createdBy      String?  @map("created_by") @db.VarChar(100)

  @@map("requirement_summaries")
  @@index([domain])
  @@index([name])
}

model AiTeamMember {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(50)
  introduction    String   @db.Text
  role            String   @db.Text
  responsibilities String  @db.Text
  greeting        String?  @db.Text
  category        String?  @db.Text
  mcpConfigJson   String?  @db.Text
  aiModelName     String?  @db.VarChar(100)
  aiModelBaseUrl  String?  @db.Text
  aiModelApiKey   String?  @db.Text
  aiModelTemperature Float? @default(0.2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String

  @@index([createdBy])
}

model AiTeamApplication {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  introduction String  @db.Text
  entryUrl    String   @db.Text
  category    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  @@index([createdBy])
}

// 系统/产品模型
model System {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  status      String   @default("active") // active, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // 关联
  productInfo     ProductInfo?
  architecture    Architecture?
  apiInterfaces   APIInterface[]
  requirementTemplate RequirementTemplate?
  requirementActions RequirementAction[]
  uploadedImages   UploadedImage[]  // 添加上传图片关联
  requirementFiles RequirementFile[] // 添加需求文件关联

  @@index([status])
}

// 上传图片元数据模型
model UploadedImage {
  id          String   @id @default(cuid())
  systemId    String   // 关联的系统ID
  name        String   // 原始文件名
  ossKey      String   @unique // OSS中的唯一标识key
  url         String   // 图片访问URL
  provider    String   @default("aliyun-oss") // 存储提供商
  fileSize    Int?     // 文件大小（字节）
  fileType    String?  // 文件MIME类型
  uploadTime  DateTime @default(now()) // 上传时间
  createdBy   String?  // 上传者
  
  // 关联系统
  system      System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  @@index([systemId]) // 索引系统ID以加速查询
  @@index([ossKey])   // 索引OSS key
}

// 需求文件模型
model RequirementFile {
  id          String   @id @default(cuid())
  name        String   // 文件名
  systemId    String   // 关联的系统ID
  qwenFileId  String   // Qwen API返回的文件ID
  mimeType    String   // 文件MIME类型
  uploadedBy  String   // 上传用户ID
  uploadedAt  DateTime @default(now())
  
  // 关联系统
  system      System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  @@index([systemId])
  @@index([uploadedBy])
  @@map("requirement_files")
}

// 产品信息模型
model ProductInfo {
  id            String   @id @default(cuid())
  systemId      String   @unique
  overview      String   @db.Text  // 存储电梯演讲内容
  userPersona   Json     // 存储用户画像列表 [{title, features, needs}]
  architecture  Json     // 存储信息架构树
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联
  system        System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
}

// 系统架构模型
model Architecture {
  id            String   @id @default(cuid())
  systemId      String   @unique
  highLevel     String   @db.Text  // 高阶架构
  microservice  String   @db.Text  // 应用架构
  deployment    String   @db.Text  // 部署架构
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联
  system        System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
}

// API接口模型
model APIInterface {
  id              String   @id @default(cuid())
  systemId        String
  name            String
  description     String   @db.Text
  type            String   // REST, Kafka, RPC, GraphQL
  endpoint        String
  operation       String
  swaggerEndpoint String?
  swaggerDoc      Json?    // 存储完整的swagger文档
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 关联
  system          System   @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([systemId])
}

// 需求书模板模型
model RequirementTemplate {
  id            String   @id @default(cuid())
  systemId      String   @unique
  content       String   @db.Text  // 存储需求书模板内容
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联
  system        System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
}

// 需求编辑动作记录模型
model RequirementAction {
  id            String    @id @default(cuid())
  systemId      String
  type          String    // 'edit', 'analyze', 'other'
  duration      Float     // 持续时间（秒）
  contentBefore String?   @db.Text
  contentAfter  String?   @db.Text
  timestamp     DateTime  @default(now())
  processed     Boolean   @default(false)
  
  // 关联系统
  system        System    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  @@index([systemId])
  @@index([processed])
  @@index([type])
}
